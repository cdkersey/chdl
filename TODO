CHDL Near-term Roadmap
======================

_ Technology mapping
  - Use a truth table based approach.
  - Each truth table is a binary vector and a set of at most 6 inputs
  - The inputs are re-ordered to minimize the value of the truth table when
    represented as a uint64_t. This canonical ordering is used to find identity
    classes for binary functions.
_ Create a separate header for utility functions, integer math, etc.
  - like the int log2 macro

_ Fix handling of memory in vis.cpp
  - Currently the outputs are just unattached hexagons and the address nodes
    are not indicated at all.

_ Create some documentation.

Possible future features:
  _ Change nand-based IR to industry-standard AIG (and/inverter graph)
  _ Netlist reading
  _ Pass manager
    - Is there any reason to optimize in an order other than the one used by
      the optimize function?
    - Could technology mapping be handled by this same pass manager?
  _ NodeType enumeration
    - Why? Sure enumerations can be extended but that would just lead to many
      possible integers for each enum name.
    - So we can easily pass info about node types to e.g. print them in
      different ways. Might look prettier than RTTI.
